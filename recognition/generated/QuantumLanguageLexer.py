# Generated from QuantumLanguageLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from recognition.base.QuantumLanguageLexerBase import QuantumLanguageLexerBase


def serializedATN():
    return [
        4,0,63,384,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
        9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
        14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,
        19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
        27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
        30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,
        35,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,
        38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
        40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,
        45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,
        52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,5,55,326,8,55,10,55,12,55,
        329,9,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,337,8,56,1,57,1,57,5,
        57,341,8,57,10,57,12,57,344,9,57,1,57,3,57,347,8,57,1,58,1,58,3,
        58,351,8,58,1,58,1,58,1,59,1,59,1,59,4,59,358,8,59,11,59,12,59,359,
        1,60,1,60,4,60,364,8,60,11,60,12,60,365,1,60,1,60,1,61,4,61,371,
        8,61,11,61,12,61,372,1,61,1,61,1,62,1,62,4,62,379,8,62,11,62,12,
        62,380,1,62,1,62,0,0,63,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
        53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,
        125,63,1,0,9,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,
        57,1,0,48,57,1,0,48,48,2,0,73,73,105,105,3,0,43,43,45,45,48,49,3,
        0,9,10,13,13,32,32,2,0,10,10,13,13,392,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
        1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
        1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
        1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
        1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
        0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
        1,0,0,0,0,125,1,0,0,0,1,127,1,0,0,0,3,129,1,0,0,0,5,131,1,0,0,0,
        7,133,1,0,0,0,9,135,1,0,0,0,11,138,1,0,0,0,13,140,1,0,0,0,15,143,
        1,0,0,0,17,145,1,0,0,0,19,147,1,0,0,0,21,149,1,0,0,0,23,152,1,0,
        0,0,25,155,1,0,0,0,27,157,1,0,0,0,29,159,1,0,0,0,31,162,1,0,0,0,
        33,165,1,0,0,0,35,168,1,0,0,0,37,171,1,0,0,0,39,174,1,0,0,0,41,176,
        1,0,0,0,43,180,1,0,0,0,45,187,1,0,0,0,47,193,1,0,0,0,49,200,1,0,
        0,0,51,203,1,0,0,0,53,208,1,0,0,0,55,213,1,0,0,0,57,219,1,0,0,0,
        59,223,1,0,0,0,61,226,1,0,0,0,63,230,1,0,0,0,65,238,1,0,0,0,67,245,
        1,0,0,0,69,248,1,0,0,0,71,252,1,0,0,0,73,256,1,0,0,0,75,259,1,0,
        0,0,77,264,1,0,0,0,79,269,1,0,0,0,81,275,1,0,0,0,83,281,1,0,0,0,
        85,286,1,0,0,0,87,295,1,0,0,0,89,301,1,0,0,0,91,303,1,0,0,0,93,305,
        1,0,0,0,95,307,1,0,0,0,97,309,1,0,0,0,99,311,1,0,0,0,101,313,1,0,
        0,0,103,315,1,0,0,0,105,317,1,0,0,0,107,319,1,0,0,0,109,321,1,0,
        0,0,111,323,1,0,0,0,113,336,1,0,0,0,115,346,1,0,0,0,117,350,1,0,
        0,0,119,354,1,0,0,0,121,361,1,0,0,0,123,370,1,0,0,0,125,376,1,0,
        0,0,127,128,5,43,0,0,128,2,1,0,0,0,129,130,5,45,0,0,130,4,1,0,0,
        0,131,132,5,42,0,0,132,6,1,0,0,0,133,134,5,47,0,0,134,8,1,0,0,0,
        135,136,5,47,0,0,136,137,5,47,0,0,137,10,1,0,0,0,138,139,5,37,0,
        0,139,12,1,0,0,0,140,141,5,42,0,0,141,142,5,42,0,0,142,14,1,0,0,
        0,143,144,5,124,0,0,144,16,1,0,0,0,145,146,5,94,0,0,146,18,1,0,0,
        0,147,148,5,38,0,0,148,20,1,0,0,0,149,150,5,60,0,0,150,151,5,60,
        0,0,151,22,1,0,0,0,152,153,5,62,0,0,153,154,5,62,0,0,154,24,1,0,
        0,0,155,156,5,60,0,0,156,26,1,0,0,0,157,158,5,62,0,0,158,28,1,0,
        0,0,159,160,5,61,0,0,160,161,5,61,0,0,161,30,1,0,0,0,162,163,5,62,
        0,0,163,164,5,61,0,0,164,32,1,0,0,0,165,166,5,60,0,0,166,167,5,61,
        0,0,167,34,1,0,0,0,168,169,5,60,0,0,169,170,5,62,0,0,170,36,1,0,
        0,0,171,172,5,33,0,0,172,173,5,61,0,0,173,38,1,0,0,0,174,175,5,61,
        0,0,175,40,1,0,0,0,176,177,5,100,0,0,177,178,5,101,0,0,178,179,5,
        102,0,0,179,42,1,0,0,0,180,181,5,114,0,0,181,182,5,101,0,0,182,183,
        5,116,0,0,183,184,5,117,0,0,184,185,5,114,0,0,185,186,5,110,0,0,
        186,44,1,0,0,0,187,188,5,114,0,0,188,189,5,97,0,0,189,190,5,105,
        0,0,190,191,5,115,0,0,191,192,5,101,0,0,192,46,1,0,0,0,193,194,5,
        97,0,0,194,195,5,115,0,0,195,196,5,115,0,0,196,197,5,101,0,0,197,
        198,5,114,0,0,198,199,5,116,0,0,199,48,1,0,0,0,200,201,5,105,0,0,
        201,202,5,102,0,0,202,50,1,0,0,0,203,204,5,101,0,0,204,205,5,108,
        0,0,205,206,5,105,0,0,206,207,5,102,0,0,207,52,1,0,0,0,208,209,5,
        101,0,0,209,210,5,108,0,0,210,211,5,115,0,0,211,212,5,101,0,0,212,
        54,1,0,0,0,213,214,5,119,0,0,214,215,5,104,0,0,215,216,5,105,0,0,
        216,217,5,108,0,0,217,218,5,101,0,0,218,56,1,0,0,0,219,220,5,102,
        0,0,220,221,5,111,0,0,221,222,5,114,0,0,222,58,1,0,0,0,223,224,5,
        105,0,0,224,225,5,110,0,0,225,60,1,0,0,0,226,227,5,116,0,0,227,228,
        5,114,0,0,228,229,5,121,0,0,229,62,1,0,0,0,230,231,5,102,0,0,231,
        232,5,105,0,0,232,233,5,110,0,0,233,234,5,97,0,0,234,235,5,108,0,
        0,235,236,5,108,0,0,236,237,5,121,0,0,237,64,1,0,0,0,238,239,5,101,
        0,0,239,240,5,120,0,0,240,241,5,99,0,0,241,242,5,101,0,0,242,243,
        5,112,0,0,243,244,5,116,0,0,244,66,1,0,0,0,245,246,5,111,0,0,246,
        247,5,114,0,0,247,68,1,0,0,0,248,249,5,97,0,0,249,250,5,110,0,0,
        250,251,5,100,0,0,251,70,1,0,0,0,252,253,5,110,0,0,253,254,5,111,
        0,0,254,255,5,116,0,0,255,72,1,0,0,0,256,257,5,105,0,0,257,258,5,
        115,0,0,258,74,1,0,0,0,259,260,5,78,0,0,260,261,5,111,0,0,261,262,
        5,110,0,0,262,263,5,101,0,0,263,76,1,0,0,0,264,265,5,84,0,0,265,
        266,5,114,0,0,266,267,5,117,0,0,267,268,5,101,0,0,268,78,1,0,0,0,
        269,270,5,70,0,0,270,271,5,97,0,0,271,272,5,108,0,0,272,273,5,115,
        0,0,273,274,5,101,0,0,274,80,1,0,0,0,275,276,5,99,0,0,276,277,5,
        108,0,0,277,278,5,97,0,0,278,279,5,115,0,0,279,280,5,115,0,0,280,
        82,1,0,0,0,281,282,5,112,0,0,282,283,5,97,0,0,283,284,5,115,0,0,
        284,285,5,115,0,0,285,84,1,0,0,0,286,287,5,99,0,0,287,288,5,111,
        0,0,288,289,5,110,0,0,289,290,5,116,0,0,290,291,5,105,0,0,291,292,
        5,110,0,0,292,293,5,117,0,0,293,294,5,101,0,0,294,86,1,0,0,0,295,
        296,5,98,0,0,296,297,5,114,0,0,297,298,5,101,0,0,298,299,5,97,0,
        0,299,300,5,107,0,0,300,88,1,0,0,0,301,302,5,40,0,0,302,90,1,0,0,
        0,303,304,5,41,0,0,304,92,1,0,0,0,305,306,5,91,0,0,306,94,1,0,0,
        0,307,308,5,93,0,0,308,96,1,0,0,0,309,310,5,46,0,0,310,98,1,0,0,
        0,311,312,5,44,0,0,312,100,1,0,0,0,313,314,5,58,0,0,314,102,1,0,
        0,0,315,316,5,59,0,0,316,104,1,0,0,0,317,318,5,10,0,0,318,106,1,
        0,0,0,319,320,5,123,0,0,320,108,1,0,0,0,321,322,5,125,0,0,322,110,
        1,0,0,0,323,327,7,0,0,0,324,326,7,1,0,0,325,324,1,0,0,0,326,329,
        1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,112,1,0,0,0,329,327,
        1,0,0,0,330,331,5,39,0,0,331,332,9,0,0,0,332,337,5,39,0,0,333,334,
        5,34,0,0,334,335,9,0,0,0,335,337,5,34,0,0,336,330,1,0,0,0,336,333,
        1,0,0,0,337,114,1,0,0,0,338,342,7,2,0,0,339,341,7,3,0,0,340,339,
        1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,347,
        1,0,0,0,344,342,1,0,0,0,345,347,7,4,0,0,346,338,1,0,0,0,346,345,
        1,0,0,0,347,116,1,0,0,0,348,351,3,119,59,0,349,351,3,115,57,0,350,
        348,1,0,0,0,350,349,1,0,0,0,351,352,1,0,0,0,352,353,7,5,0,0,353,
        118,1,0,0,0,354,355,3,115,57,0,355,357,5,46,0,0,356,358,7,3,0,0,
        357,356,1,0,0,0,358,359,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,
        360,120,1,0,0,0,361,363,5,124,0,0,362,364,7,6,0,0,363,362,1,0,0,
        0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,
        0,367,368,5,62,0,0,368,122,1,0,0,0,369,371,7,7,0,0,370,369,1,0,0,
        0,371,372,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,
        0,374,375,6,61,0,0,375,124,1,0,0,0,376,378,5,35,0,0,377,379,8,8,
        0,0,378,377,1,0,0,0,379,380,1,0,0,0,380,378,1,0,0,0,380,381,1,0,
        0,0,381,382,1,0,0,0,382,383,6,62,0,0,383,126,1,0,0,0,10,0,327,336,
        342,346,350,359,365,372,380,1,6,0,0
    ]

class QuantumLanguageLexer(QuantumLanguageLexerBase):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ADD = 1
    MINUS = 2
    STAR = 3
    DIV = 4
    IDIV = 5
    MOD = 6
    POWER = 7
    OR_OP = 8
    XOR = 9
    AND_OP = 10
    LEFT_SHIFT = 11
    RIGHT_SHIFT = 12
    LESS_THAN = 13
    GREATER_THAN = 14
    EQUALS = 15
    GT_EQ = 16
    LT_EQ = 17
    NOT_EQ_1 = 18
    NOT_EQ_2 = 19
    ASSIGN = 20
    DEF = 21
    RETURN = 22
    RAISE = 23
    ASSERT = 24
    IF = 25
    ELIF = 26
    ELSE = 27
    WHILE = 28
    FOR = 29
    IN = 30
    TRY = 31
    FINALLY = 32
    EXCEPT = 33
    OR = 34
    AND = 35
    NOT = 36
    IS = 37
    NONE = 38
    TRUE = 39
    FALSE = 40
    CLASS = 41
    PASS = 42
    CONTINUE = 43
    BREAK = 44
    OPEN_PAREN = 45
    CLOSE_PAREN = 46
    OPEN_BRACK = 47
    CLOSE_BRACK = 48
    DOT = 49
    COMMA = 50
    COLON = 51
    SEMI_COLON = 52
    NEWLINE = 53
    INDENT = 54
    DEDENT = 55
    IDENTIFIER = 56
    STRING_LITERAL = 57
    INTEGER_LITERAL = 58
    IMAGINARY_LITERAL = 59
    FLOAT_LITERAL = 60
    QUBIT_STATE_LITERAL = 61
    SPACES = 62
    COMMENTS = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'//'", "'%'", "'**'", "'|'", "'^'", 
            "'&'", "'<<'", "'>>'", "'<'", "'>'", "'=='", "'>='", "'<='", 
            "'<>'", "'!='", "'='", "'def'", "'return'", "'raise'", "'assert'", 
            "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
            "'finally'", "'except'", "'or'", "'and'", "'not'", "'is'", "'None'", 
            "'True'", "'False'", "'class'", "'pass'", "'continue'", "'break'", 
            "'('", "')'", "'['", "']'", "'.'", "','", "':'", "';'", "'\\n'", 
            "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "MINUS", "STAR", "DIV", "IDIV", "MOD", "POWER", "OR_OP", 
            "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "LESS_THAN", "GREATER_THAN", 
            "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "ASSIGN", 
            "DEF", "RETURN", "RAISE", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
            "FOR", "IN", "TRY", "FINALLY", "EXCEPT", "OR", "AND", "NOT", 
            "IS", "NONE", "TRUE", "FALSE", "CLASS", "PASS", "CONTINUE", 
            "BREAK", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
            "DOT", "COMMA", "COLON", "SEMI_COLON", "NEWLINE", "INDENT", 
            "DEDENT", "IDENTIFIER", "STRING_LITERAL", "INTEGER_LITERAL", 
            "IMAGINARY_LITERAL", "FLOAT_LITERAL", "QUBIT_STATE_LITERAL", 
            "SPACES", "COMMENTS" ]

    ruleNames = [ "ADD", "MINUS", "STAR", "DIV", "IDIV", "MOD", "POWER", 
                  "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                  "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                  "NOT_EQ_1", "NOT_EQ_2", "ASSIGN", "DEF", "RETURN", "RAISE", 
                  "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", 
                  "TRY", "FINALLY", "EXCEPT", "OR", "AND", "NOT", "IS", 
                  "NONE", "TRUE", "FALSE", "CLASS", "PASS", "CONTINUE", 
                  "BREAK", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
                  "DOT", "COMMA", "COLON", "SEMI_COLON", "NEWLINE", "INDENT", 
                  "DEDENT", "IDENTIFIER", "STRING_LITERAL", "INTEGER_LITERAL", 
                  "IMAGINARY_LITERAL", "FLOAT_LITERAL", "QUBIT_STATE_LITERAL", 
                  "SPACES", "COMMENTS" ]

    grammarFileName = "QuantumLanguageLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


