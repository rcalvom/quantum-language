# Generated from QuantumLanguageLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


if __name__ is not None and "." in __name__:
    from ..base.QuantumLanguageLexerBase import QuantumLanguageLexerBase
else:
    from QuantumLanguageLexerBase import QuantumLanguageLexerBase


def serializedATN():
    return [
        4,0,68,431,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
        10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
        15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,
        20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
        25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,
        27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,
        30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,
        35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
        38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,
        41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,
        44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,
        53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,
        59,1,60,1,60,5,60,373,8,60,10,60,12,60,376,9,60,1,61,1,61,1,61,1,
        61,1,61,1,61,3,61,384,8,61,1,62,1,62,5,62,388,8,62,10,62,12,62,391,
        9,62,1,62,3,62,394,8,62,1,63,1,63,3,63,398,8,63,1,63,1,63,1,64,1,
        64,1,64,4,64,405,8,64,11,64,12,64,406,1,65,1,65,4,65,411,8,65,11,
        65,12,65,412,1,65,1,65,1,66,4,66,418,8,66,11,66,12,66,419,1,66,1,
        66,1,67,1,67,4,67,426,8,67,11,67,12,67,427,1,67,1,67,0,0,68,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
        57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,
        133,67,135,68,1,0,9,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,49,57,1,0,48,57,1,0,48,48,2,0,73,73,105,105,3,0,43,43,45,45,
        48,49,3,0,9,10,13,13,32,32,2,0,10,10,13,13,439,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
        0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
        113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,
        0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,
        1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,1,137,1,0,0,0,3,139,1,0,0,0,
        5,141,1,0,0,0,7,143,1,0,0,0,9,145,1,0,0,0,11,148,1,0,0,0,13,150,
        1,0,0,0,15,153,1,0,0,0,17,155,1,0,0,0,19,157,1,0,0,0,21,159,1,0,
        0,0,23,162,1,0,0,0,25,165,1,0,0,0,27,167,1,0,0,0,29,169,1,0,0,0,
        31,172,1,0,0,0,33,175,1,0,0,0,35,178,1,0,0,0,37,181,1,0,0,0,39,184,
        1,0,0,0,41,186,1,0,0,0,43,190,1,0,0,0,45,197,1,0,0,0,47,203,1,0,
        0,0,49,210,1,0,0,0,51,213,1,0,0,0,53,218,1,0,0,0,55,223,1,0,0,0,
        57,229,1,0,0,0,59,233,1,0,0,0,61,236,1,0,0,0,63,240,1,0,0,0,65,248,
        1,0,0,0,67,255,1,0,0,0,69,258,1,0,0,0,71,262,1,0,0,0,73,266,1,0,
        0,0,75,269,1,0,0,0,77,274,1,0,0,0,79,279,1,0,0,0,81,285,1,0,0,0,
        83,291,1,0,0,0,85,296,1,0,0,0,87,305,1,0,0,0,89,311,1,0,0,0,91,318,
        1,0,0,0,93,323,1,0,0,0,95,328,1,0,0,0,97,338,1,0,0,0,99,348,1,0,
        0,0,101,350,1,0,0,0,103,352,1,0,0,0,105,354,1,0,0,0,107,356,1,0,
        0,0,109,358,1,0,0,0,111,360,1,0,0,0,113,362,1,0,0,0,115,364,1,0,
        0,0,117,366,1,0,0,0,119,368,1,0,0,0,121,370,1,0,0,0,123,383,1,0,
        0,0,125,393,1,0,0,0,127,397,1,0,0,0,129,401,1,0,0,0,131,408,1,0,
        0,0,133,417,1,0,0,0,135,423,1,0,0,0,137,138,5,43,0,0,138,2,1,0,0,
        0,139,140,5,45,0,0,140,4,1,0,0,0,141,142,5,42,0,0,142,6,1,0,0,0,
        143,144,5,47,0,0,144,8,1,0,0,0,145,146,5,47,0,0,146,147,5,47,0,0,
        147,10,1,0,0,0,148,149,5,37,0,0,149,12,1,0,0,0,150,151,5,42,0,0,
        151,152,5,42,0,0,152,14,1,0,0,0,153,154,5,124,0,0,154,16,1,0,0,0,
        155,156,5,94,0,0,156,18,1,0,0,0,157,158,5,38,0,0,158,20,1,0,0,0,
        159,160,5,60,0,0,160,161,5,60,0,0,161,22,1,0,0,0,162,163,5,62,0,
        0,163,164,5,62,0,0,164,24,1,0,0,0,165,166,5,60,0,0,166,26,1,0,0,
        0,167,168,5,62,0,0,168,28,1,0,0,0,169,170,5,61,0,0,170,171,5,61,
        0,0,171,30,1,0,0,0,172,173,5,62,0,0,173,174,5,61,0,0,174,32,1,0,
        0,0,175,176,5,60,0,0,176,177,5,61,0,0,177,34,1,0,0,0,178,179,5,60,
        0,0,179,180,5,62,0,0,180,36,1,0,0,0,181,182,5,33,0,0,182,183,5,61,
        0,0,183,38,1,0,0,0,184,185,5,61,0,0,185,40,1,0,0,0,186,187,5,100,
        0,0,187,188,5,101,0,0,188,189,5,102,0,0,189,42,1,0,0,0,190,191,5,
        114,0,0,191,192,5,101,0,0,192,193,5,116,0,0,193,194,5,117,0,0,194,
        195,5,114,0,0,195,196,5,110,0,0,196,44,1,0,0,0,197,198,5,114,0,0,
        198,199,5,97,0,0,199,200,5,105,0,0,200,201,5,115,0,0,201,202,5,101,
        0,0,202,46,1,0,0,0,203,204,5,97,0,0,204,205,5,115,0,0,205,206,5,
        115,0,0,206,207,5,101,0,0,207,208,5,114,0,0,208,209,5,116,0,0,209,
        48,1,0,0,0,210,211,5,105,0,0,211,212,5,102,0,0,212,50,1,0,0,0,213,
        214,5,101,0,0,214,215,5,108,0,0,215,216,5,105,0,0,216,217,5,102,
        0,0,217,52,1,0,0,0,218,219,5,101,0,0,219,220,5,108,0,0,220,221,5,
        115,0,0,221,222,5,101,0,0,222,54,1,0,0,0,223,224,5,119,0,0,224,225,
        5,104,0,0,225,226,5,105,0,0,226,227,5,108,0,0,227,228,5,101,0,0,
        228,56,1,0,0,0,229,230,5,102,0,0,230,231,5,111,0,0,231,232,5,114,
        0,0,232,58,1,0,0,0,233,234,5,105,0,0,234,235,5,110,0,0,235,60,1,
        0,0,0,236,237,5,116,0,0,237,238,5,114,0,0,238,239,5,121,0,0,239,
        62,1,0,0,0,240,241,5,102,0,0,241,242,5,105,0,0,242,243,5,110,0,0,
        243,244,5,97,0,0,244,245,5,108,0,0,245,246,5,108,0,0,246,247,5,121,
        0,0,247,64,1,0,0,0,248,249,5,101,0,0,249,250,5,120,0,0,250,251,5,
        99,0,0,251,252,5,101,0,0,252,253,5,112,0,0,253,254,5,116,0,0,254,
        66,1,0,0,0,255,256,5,111,0,0,256,257,5,114,0,0,257,68,1,0,0,0,258,
        259,5,97,0,0,259,260,5,110,0,0,260,261,5,100,0,0,261,70,1,0,0,0,
        262,263,5,110,0,0,263,264,5,111,0,0,264,265,5,116,0,0,265,72,1,0,
        0,0,266,267,5,105,0,0,267,268,5,115,0,0,268,74,1,0,0,0,269,270,5,
        78,0,0,270,271,5,111,0,0,271,272,5,110,0,0,272,273,5,101,0,0,273,
        76,1,0,0,0,274,275,5,84,0,0,275,276,5,114,0,0,276,277,5,117,0,0,
        277,278,5,101,0,0,278,78,1,0,0,0,279,280,5,70,0,0,280,281,5,97,0,
        0,281,282,5,108,0,0,282,283,5,115,0,0,283,284,5,101,0,0,284,80,1,
        0,0,0,285,286,5,99,0,0,286,287,5,108,0,0,287,288,5,97,0,0,288,289,
        5,115,0,0,289,290,5,115,0,0,290,82,1,0,0,0,291,292,5,112,0,0,292,
        293,5,97,0,0,293,294,5,115,0,0,294,295,5,115,0,0,295,84,1,0,0,0,
        296,297,5,99,0,0,297,298,5,111,0,0,298,299,5,110,0,0,299,300,5,116,
        0,0,300,301,5,105,0,0,301,302,5,110,0,0,302,303,5,117,0,0,303,304,
        5,101,0,0,304,86,1,0,0,0,305,306,5,98,0,0,306,307,5,114,0,0,307,
        308,5,101,0,0,308,309,5,97,0,0,309,310,5,107,0,0,310,88,1,0,0,0,
        311,312,5,109,0,0,312,313,5,97,0,0,313,314,5,116,0,0,314,315,5,109,
        0,0,315,316,5,117,0,0,316,317,5,108,0,0,317,90,1,0,0,0,318,319,5,
        107,0,0,319,320,5,114,0,0,320,321,5,111,0,0,321,322,5,110,0,0,322,
        92,1,0,0,0,323,324,5,104,0,0,324,325,5,101,0,0,325,326,5,114,0,0,
        326,327,5,109,0,0,327,94,1,0,0,0,328,329,5,99,0,0,329,330,5,111,
        0,0,330,331,5,110,0,0,331,332,5,106,0,0,332,333,5,117,0,0,333,334,
        5,103,0,0,334,335,5,97,0,0,335,336,5,116,0,0,336,337,5,101,0,0,337,
        96,1,0,0,0,338,339,5,116,0,0,339,340,5,114,0,0,340,341,5,97,0,0,
        341,342,5,110,0,0,342,343,5,115,0,0,343,344,5,112,0,0,344,345,5,
        111,0,0,345,346,5,115,0,0,346,347,5,101,0,0,347,98,1,0,0,0,348,349,
        5,40,0,0,349,100,1,0,0,0,350,351,5,41,0,0,351,102,1,0,0,0,352,353,
        5,91,0,0,353,104,1,0,0,0,354,355,5,93,0,0,355,106,1,0,0,0,356,357,
        5,46,0,0,357,108,1,0,0,0,358,359,5,44,0,0,359,110,1,0,0,0,360,361,
        5,58,0,0,361,112,1,0,0,0,362,363,5,59,0,0,363,114,1,0,0,0,364,365,
        5,10,0,0,365,116,1,0,0,0,366,367,5,123,0,0,367,118,1,0,0,0,368,369,
        5,125,0,0,369,120,1,0,0,0,370,374,7,0,0,0,371,373,7,1,0,0,372,371,
        1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,122,
        1,0,0,0,376,374,1,0,0,0,377,378,5,39,0,0,378,379,9,0,0,0,379,384,
        5,39,0,0,380,381,5,34,0,0,381,382,9,0,0,0,382,384,5,34,0,0,383,377,
        1,0,0,0,383,380,1,0,0,0,384,124,1,0,0,0,385,389,7,2,0,0,386,388,
        7,3,0,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,
        1,0,0,0,390,394,1,0,0,0,391,389,1,0,0,0,392,394,7,4,0,0,393,385,
        1,0,0,0,393,392,1,0,0,0,394,126,1,0,0,0,395,398,3,129,64,0,396,398,
        3,125,62,0,397,395,1,0,0,0,397,396,1,0,0,0,398,399,1,0,0,0,399,400,
        7,5,0,0,400,128,1,0,0,0,401,402,3,125,62,0,402,404,5,46,0,0,403,
        405,7,3,0,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,
        407,1,0,0,0,407,130,1,0,0,0,408,410,5,124,0,0,409,411,7,6,0,0,410,
        409,1,0,0,0,411,412,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,
        414,1,0,0,0,414,415,5,62,0,0,415,132,1,0,0,0,416,418,7,7,0,0,417,
        416,1,0,0,0,418,419,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,
        421,1,0,0,0,421,422,6,66,0,0,422,134,1,0,0,0,423,425,5,35,0,0,424,
        426,8,8,0,0,425,424,1,0,0,0,426,427,1,0,0,0,427,425,1,0,0,0,427,
        428,1,0,0,0,428,429,1,0,0,0,429,430,6,67,0,0,430,136,1,0,0,0,10,
        0,374,383,389,393,397,406,412,419,427,1,6,0,0
    ]

class QuantumLanguageLexer(QuantumLanguageLexerBase):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ADD = 1
    MINUS = 2
    STAR = 3
    DIV = 4
    IDIV = 5
    MOD = 6
    POWER = 7
    OR_OP = 8
    XOR = 9
    AND_OP = 10
    LEFT_SHIFT = 11
    RIGHT_SHIFT = 12
    LESS_THAN = 13
    GREATER_THAN = 14
    EQUALS = 15
    GT_EQ = 16
    LT_EQ = 17
    NOT_EQ_1 = 18
    NOT_EQ_2 = 19
    ASSIGN = 20
    DEF = 21
    RETURN = 22
    RAISE = 23
    ASSERT = 24
    IF = 25
    ELIF = 26
    ELSE = 27
    WHILE = 28
    FOR = 29
    IN = 30
    TRY = 31
    FINALLY = 32
    EXCEPT = 33
    OR = 34
    AND = 35
    NOT = 36
    IS = 37
    NONE = 38
    TRUE = 39
    FALSE = 40
    CLASS = 41
    PASS = 42
    CONTINUE = 43
    BREAK = 44
    MATMUL = 45
    KRONECKER = 46
    HERMITIAN = 47
    CONJUGATE = 48
    TRANSPOSE = 49
    OPEN_PAREN = 50
    CLOSE_PAREN = 51
    OPEN_BRACK = 52
    CLOSE_BRACK = 53
    DOT = 54
    COMMA = 55
    COLON = 56
    SEMI_COLON = 57
    NEWLINE = 58
    INDENT = 59
    DEDENT = 60
    IDENTIFIER = 61
    STRING_LITERAL = 62
    INTEGER_LITERAL = 63
    IMAGINARY_LITERAL = 64
    FLOAT_LITERAL = 65
    QUBIT_STATE_LITERAL = 66
    SPACES = 67
    COMMENTS = 68

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'//'", "'%'", "'**'", "'|'", "'^'", 
            "'&'", "'<<'", "'>>'", "'<'", "'>'", "'=='", "'>='", "'<='", 
            "'<>'", "'!='", "'='", "'def'", "'return'", "'raise'", "'assert'", 
            "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
            "'finally'", "'except'", "'or'", "'and'", "'not'", "'is'", "'None'", 
            "'True'", "'False'", "'class'", "'pass'", "'continue'", "'break'", 
            "'matmul'", "'kron'", "'herm'", "'conjugate'", "'transpose'", 
            "'('", "')'", "'['", "']'", "'.'", "','", "':'", "';'", "'\\n'", 
            "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "MINUS", "STAR", "DIV", "IDIV", "MOD", "POWER", "OR_OP", 
            "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "LESS_THAN", "GREATER_THAN", 
            "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "ASSIGN", 
            "DEF", "RETURN", "RAISE", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
            "FOR", "IN", "TRY", "FINALLY", "EXCEPT", "OR", "AND", "NOT", 
            "IS", "NONE", "TRUE", "FALSE", "CLASS", "PASS", "CONTINUE", 
            "BREAK", "MATMUL", "KRONECKER", "HERMITIAN", "CONJUGATE", "TRANSPOSE", 
            "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", "DOT", 
            "COMMA", "COLON", "SEMI_COLON", "NEWLINE", "INDENT", "DEDENT", 
            "IDENTIFIER", "STRING_LITERAL", "INTEGER_LITERAL", "IMAGINARY_LITERAL", 
            "FLOAT_LITERAL", "QUBIT_STATE_LITERAL", "SPACES", "COMMENTS" ]

    ruleNames = [ "ADD", "MINUS", "STAR", "DIV", "IDIV", "MOD", "POWER", 
                  "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                  "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                  "NOT_EQ_1", "NOT_EQ_2", "ASSIGN", "DEF", "RETURN", "RAISE", 
                  "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", 
                  "TRY", "FINALLY", "EXCEPT", "OR", "AND", "NOT", "IS", 
                  "NONE", "TRUE", "FALSE", "CLASS", "PASS", "CONTINUE", 
                  "BREAK", "MATMUL", "KRONECKER", "HERMITIAN", "CONJUGATE", 
                  "TRANSPOSE", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", 
                  "CLOSE_BRACK", "DOT", "COMMA", "COLON", "SEMI_COLON", 
                  "NEWLINE", "INDENT", "DEDENT", "IDENTIFIER", "STRING_LITERAL", 
                  "INTEGER_LITERAL", "IMAGINARY_LITERAL", "FLOAT_LITERAL", 
                  "QUBIT_STATE_LITERAL", "SPACES", "COMMENTS" ]

    grammarFileName = "QuantumLanguageLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


