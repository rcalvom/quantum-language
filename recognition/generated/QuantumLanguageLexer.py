# Generated from QuantumLanguageLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr4.Token import CommonToken
import re
import importlib
# Allow languages to extend the lexer and parser, by loading the parser dynamically
module_path = __name__[:-5]
language_name = __name__.split('.')[-1]
language_name = language_name[:-5]  # Remove Lexer from name
LanguageParser = getattr(importlib.import_module('{}Parser'.format(module_path)), '{}Parser'.format(language_name))


def serializedATN():
    return [
        4,0,82,514,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,1,0,4,0,163,8,0,11,0,12,0,164,1,0,1,0,1,1,1,1,
        5,1,171,8,1,10,1,12,1,174,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
        1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
        1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,
        1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
        1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
        1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,
        1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,
        1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,
        1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,
        1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,65,3,65,406,
        8,65,1,65,1,65,3,65,410,8,65,1,65,3,65,413,8,65,3,65,415,8,65,1,
        65,1,65,1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,
        70,1,71,1,71,5,71,433,8,71,10,71,12,71,436,9,71,1,72,1,72,1,72,5,
        72,441,8,72,10,72,12,72,444,9,72,1,72,1,72,1,73,1,73,1,73,5,73,451,
        8,73,10,73,12,73,454,9,73,1,73,1,73,1,74,1,74,5,74,460,8,74,10,74,
        12,74,463,9,74,1,74,1,74,1,74,5,74,468,8,74,10,74,12,74,471,9,74,
        1,74,3,74,474,8,74,1,75,1,75,5,75,478,8,75,10,75,12,75,481,9,75,
        1,75,3,75,484,8,75,1,76,1,76,3,76,488,8,76,1,76,1,76,1,77,1,77,1,
        77,4,77,495,8,77,11,77,12,77,496,1,78,1,78,4,78,501,8,78,11,78,12,
        78,502,1,78,1,78,1,79,1,79,4,79,509,8,79,11,79,12,79,510,1,79,1,
        79,2,461,469,0,80,1,3,3,4,5,5,7,6,9,7,11,8,13,9,15,10,17,11,19,12,
        21,13,23,14,25,15,27,16,29,17,31,18,33,19,35,20,37,21,39,22,41,23,
        43,24,45,25,47,26,49,27,51,28,53,29,55,30,57,31,59,32,61,33,63,34,
        65,35,67,36,69,37,71,38,73,39,75,40,77,41,79,42,81,43,83,44,85,45,
        87,46,89,47,91,48,93,49,95,50,97,51,99,52,101,53,103,54,105,55,107,
        56,109,57,111,58,113,59,115,60,117,61,119,62,121,63,123,64,125,65,
        127,66,129,67,131,68,133,69,135,70,137,71,139,72,141,73,143,74,145,
        75,147,76,149,77,151,78,153,79,155,80,157,81,159,82,1,0,9,2,0,9,
        9,32,32,2,0,10,10,12,13,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,49,57,1,0,48,57,1,0,48,48,2,0,74,74,106,106,3,0,43,43,45,
        45,48,49,531,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
        0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
        0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,
        127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,
        0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,
        1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,
        0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,1,162,1,0,0,0,3,168,1,
        0,0,0,5,177,1,0,0,0,7,179,1,0,0,0,9,181,1,0,0,0,11,183,1,0,0,0,13,
        185,1,0,0,0,15,188,1,0,0,0,17,190,1,0,0,0,19,193,1,0,0,0,21,195,
        1,0,0,0,23,197,1,0,0,0,25,200,1,0,0,0,27,203,1,0,0,0,29,206,1,0,
        0,0,31,209,1,0,0,0,33,212,1,0,0,0,35,214,1,0,0,0,37,218,1,0,0,0,
        39,225,1,0,0,0,41,231,1,0,0,0,43,238,1,0,0,0,45,241,1,0,0,0,47,246,
        1,0,0,0,49,251,1,0,0,0,51,257,1,0,0,0,53,261,1,0,0,0,55,264,1,0,
        0,0,57,268,1,0,0,0,59,276,1,0,0,0,61,283,1,0,0,0,63,286,1,0,0,0,
        65,290,1,0,0,0,67,294,1,0,0,0,69,297,1,0,0,0,71,302,1,0,0,0,73,307,
        1,0,0,0,75,313,1,0,0,0,77,319,1,0,0,0,79,324,1,0,0,0,81,333,1,0,
        0,0,83,339,1,0,0,0,85,342,1,0,0,0,87,344,1,0,0,0,89,346,1,0,0,0,
        91,348,1,0,0,0,93,350,1,0,0,0,95,352,1,0,0,0,97,356,1,0,0,0,99,364,
        1,0,0,0,101,368,1,0,0,0,103,371,1,0,0,0,105,374,1,0,0,0,107,377,
        1,0,0,0,109,380,1,0,0,0,111,382,1,0,0,0,113,384,1,0,0,0,115,386,
        1,0,0,0,117,388,1,0,0,0,119,390,1,0,0,0,121,392,1,0,0,0,123,394,
        1,0,0,0,125,396,1,0,0,0,127,398,1,0,0,0,129,400,1,0,0,0,131,414,
        1,0,0,0,133,418,1,0,0,0,135,420,1,0,0,0,137,424,1,0,0,0,139,426,
        1,0,0,0,141,428,1,0,0,0,143,430,1,0,0,0,145,437,1,0,0,0,147,447,
        1,0,0,0,149,473,1,0,0,0,151,483,1,0,0,0,153,487,1,0,0,0,155,491,
        1,0,0,0,157,498,1,0,0,0,159,506,1,0,0,0,161,163,7,0,0,0,162,161,
        1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,166,
        1,0,0,0,166,167,6,0,0,0,167,2,1,0,0,0,168,172,5,35,0,0,169,171,8,
        1,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,
        0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,176,6,1,0,0,176,4,1,0,
        0,0,177,178,5,43,0,0,178,6,1,0,0,0,179,180,5,45,0,0,180,8,1,0,0,
        0,181,182,5,42,0,0,182,10,1,0,0,0,183,184,5,47,0,0,184,12,1,0,0,
        0,185,186,5,47,0,0,186,187,5,47,0,0,187,14,1,0,0,0,188,189,5,37,
        0,0,189,16,1,0,0,0,190,191,5,42,0,0,191,192,5,42,0,0,192,18,1,0,
        0,0,193,194,5,60,0,0,194,20,1,0,0,0,195,196,5,62,0,0,196,22,1,0,
        0,0,197,198,5,61,0,0,198,199,5,61,0,0,199,24,1,0,0,0,200,201,5,62,
        0,0,201,202,5,61,0,0,202,26,1,0,0,0,203,204,5,60,0,0,204,205,5,61,
        0,0,205,28,1,0,0,0,206,207,5,60,0,0,207,208,5,62,0,0,208,30,1,0,
        0,0,209,210,5,33,0,0,210,211,5,61,0,0,211,32,1,0,0,0,212,213,5,61,
        0,0,213,34,1,0,0,0,214,215,5,100,0,0,215,216,5,101,0,0,216,217,5,
        102,0,0,217,36,1,0,0,0,218,219,5,114,0,0,219,220,5,101,0,0,220,221,
        5,116,0,0,221,222,5,117,0,0,222,223,5,114,0,0,223,224,5,110,0,0,
        224,38,1,0,0,0,225,226,5,114,0,0,226,227,5,97,0,0,227,228,5,105,
        0,0,228,229,5,115,0,0,229,230,5,101,0,0,230,40,1,0,0,0,231,232,5,
        97,0,0,232,233,5,115,0,0,233,234,5,115,0,0,234,235,5,101,0,0,235,
        236,5,114,0,0,236,237,5,116,0,0,237,42,1,0,0,0,238,239,5,105,0,0,
        239,240,5,102,0,0,240,44,1,0,0,0,241,242,5,101,0,0,242,243,5,108,
        0,0,243,244,5,105,0,0,244,245,5,102,0,0,245,46,1,0,0,0,246,247,5,
        101,0,0,247,248,5,108,0,0,248,249,5,115,0,0,249,250,5,101,0,0,250,
        48,1,0,0,0,251,252,5,119,0,0,252,253,5,104,0,0,253,254,5,105,0,0,
        254,255,5,108,0,0,255,256,5,101,0,0,256,50,1,0,0,0,257,258,5,102,
        0,0,258,259,5,111,0,0,259,260,5,114,0,0,260,52,1,0,0,0,261,262,5,
        105,0,0,262,263,5,110,0,0,263,54,1,0,0,0,264,265,5,116,0,0,265,266,
        5,114,0,0,266,267,5,121,0,0,267,56,1,0,0,0,268,269,5,102,0,0,269,
        270,5,105,0,0,270,271,5,110,0,0,271,272,5,97,0,0,272,273,5,108,0,
        0,273,274,5,108,0,0,274,275,5,121,0,0,275,58,1,0,0,0,276,277,5,101,
        0,0,277,278,5,120,0,0,278,279,5,99,0,0,279,280,5,101,0,0,280,281,
        5,112,0,0,281,282,5,116,0,0,282,60,1,0,0,0,283,284,5,111,0,0,284,
        285,5,114,0,0,285,62,1,0,0,0,286,287,5,97,0,0,287,288,5,110,0,0,
        288,289,5,100,0,0,289,64,1,0,0,0,290,291,5,110,0,0,291,292,5,111,
        0,0,292,293,5,116,0,0,293,66,1,0,0,0,294,295,5,105,0,0,295,296,5,
        115,0,0,296,68,1,0,0,0,297,298,5,78,0,0,298,299,5,111,0,0,299,300,
        5,110,0,0,300,301,5,101,0,0,301,70,1,0,0,0,302,303,5,84,0,0,303,
        304,5,114,0,0,304,305,5,117,0,0,305,306,5,101,0,0,306,72,1,0,0,0,
        307,308,5,70,0,0,308,309,5,97,0,0,309,310,5,108,0,0,310,311,5,115,
        0,0,311,312,5,101,0,0,312,74,1,0,0,0,313,314,5,99,0,0,314,315,5,
        108,0,0,315,316,5,97,0,0,316,317,5,115,0,0,317,318,5,115,0,0,318,
        76,1,0,0,0,319,320,5,112,0,0,320,321,5,97,0,0,321,322,5,115,0,0,
        322,323,5,115,0,0,323,78,1,0,0,0,324,325,5,99,0,0,325,326,5,111,
        0,0,326,327,5,110,0,0,327,328,5,116,0,0,328,329,5,105,0,0,329,330,
        5,110,0,0,330,331,5,117,0,0,331,332,5,101,0,0,332,80,1,0,0,0,333,
        334,5,98,0,0,334,335,5,114,0,0,335,336,5,101,0,0,336,337,5,97,0,
        0,337,338,5,107,0,0,338,82,1,0,0,0,339,340,5,112,0,0,340,341,5,105,
        0,0,341,84,1,0,0,0,342,343,5,88,0,0,343,86,1,0,0,0,344,345,5,72,
        0,0,345,88,1,0,0,0,346,347,5,90,0,0,347,90,1,0,0,0,348,349,5,89,
        0,0,349,92,1,0,0,0,350,351,5,83,0,0,351,94,1,0,0,0,352,353,5,83,
        0,0,353,354,5,68,0,0,354,355,5,71,0,0,355,96,1,0,0,0,356,357,5,84,
        0,0,357,358,5,111,0,0,358,359,5,102,0,0,359,360,5,102,0,0,360,361,
        5,111,0,0,361,362,5,108,0,0,362,363,5,105,0,0,363,98,1,0,0,0,364,
        365,5,84,0,0,365,366,5,68,0,0,366,367,5,71,0,0,367,100,1,0,0,0,368,
        369,5,82,0,0,369,370,5,88,0,0,370,102,1,0,0,0,371,372,5,82,0,0,372,
        373,5,89,0,0,373,104,1,0,0,0,374,375,5,82,0,0,375,376,5,90,0,0,376,
        106,1,0,0,0,377,378,5,67,0,0,378,379,5,88,0,0,379,108,1,0,0,0,380,
        381,5,80,0,0,381,110,1,0,0,0,382,383,5,40,0,0,383,112,1,0,0,0,384,
        385,5,41,0,0,385,114,1,0,0,0,386,387,5,91,0,0,387,116,1,0,0,0,388,
        389,5,93,0,0,389,118,1,0,0,0,390,391,5,123,0,0,391,120,1,0,0,0,392,
        393,5,125,0,0,393,122,1,0,0,0,394,395,5,46,0,0,395,124,1,0,0,0,396,
        397,5,44,0,0,397,126,1,0,0,0,398,399,5,58,0,0,399,128,1,0,0,0,400,
        401,5,59,0,0,401,130,1,0,0,0,402,403,4,65,0,0,403,415,3,1,0,0,404,
        406,5,13,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,0,407,
        410,5,10,0,0,408,410,2,12,13,0,409,405,1,0,0,0,409,408,1,0,0,0,410,
        412,1,0,0,0,411,413,3,1,0,0,412,411,1,0,0,0,412,413,1,0,0,0,413,
        415,1,0,0,0,414,402,1,0,0,0,414,409,1,0,0,0,415,416,1,0,0,0,416,
        417,6,65,1,0,417,132,1,0,0,0,418,419,5,64,0,0,419,134,1,0,0,0,420,
        421,5,40,0,0,421,422,5,88,0,0,422,423,5,41,0,0,423,136,1,0,0,0,424,
        425,5,84,0,0,425,138,1,0,0,0,426,427,5,39,0,0,427,140,1,0,0,0,428,
        429,5,116,0,0,429,142,1,0,0,0,430,434,7,2,0,0,431,433,7,3,0,0,432,
        431,1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,
        144,1,0,0,0,436,434,1,0,0,0,437,438,5,124,0,0,438,442,7,2,0,0,439,
        441,7,3,0,0,440,439,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,
        443,1,0,0,0,443,445,1,0,0,0,444,442,1,0,0,0,445,446,5,62,0,0,446,
        146,1,0,0,0,447,448,5,60,0,0,448,452,7,2,0,0,449,451,7,3,0,0,450,
        449,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,
        455,1,0,0,0,454,452,1,0,0,0,455,456,5,124,0,0,456,148,1,0,0,0,457,
        461,5,39,0,0,458,460,9,0,0,0,459,458,1,0,0,0,460,463,1,0,0,0,461,
        462,1,0,0,0,461,459,1,0,0,0,462,464,1,0,0,0,463,461,1,0,0,0,464,
        474,5,39,0,0,465,469,5,34,0,0,466,468,9,0,0,0,467,466,1,0,0,0,468,
        471,1,0,0,0,469,470,1,0,0,0,469,467,1,0,0,0,470,472,1,0,0,0,471,
        469,1,0,0,0,472,474,5,34,0,0,473,457,1,0,0,0,473,465,1,0,0,0,474,
        150,1,0,0,0,475,479,7,4,0,0,476,478,7,5,0,0,477,476,1,0,0,0,478,
        481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,484,1,0,0,0,481,
        479,1,0,0,0,482,484,7,6,0,0,483,475,1,0,0,0,483,482,1,0,0,0,484,
        152,1,0,0,0,485,488,3,155,77,0,486,488,3,151,75,0,487,485,1,0,0,
        0,487,486,1,0,0,0,488,489,1,0,0,0,489,490,7,7,0,0,490,154,1,0,0,
        0,491,492,3,151,75,0,492,494,5,46,0,0,493,495,7,5,0,0,494,493,1,
        0,0,0,495,496,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,156,1,
        0,0,0,498,500,5,124,0,0,499,501,7,8,0,0,500,499,1,0,0,0,501,502,
        1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,505,
        5,62,0,0,505,158,1,0,0,0,506,508,5,60,0,0,507,509,7,8,0,0,508,507,
        1,0,0,0,509,510,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,512,
        1,0,0,0,512,513,5,124,0,0,513,160,1,0,0,0,19,0,164,172,405,409,412,
        414,434,442,452,461,469,473,479,483,487,496,502,510,2,6,0,0,1,65,
        0
    ]

class QuantumLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INDENT = 1
    DEDENT = 2
    SPACES = 3
    COMMENTS = 4
    ADD = 5
    MINUS = 6
    STAR = 7
    DIV = 8
    IDIV = 9
    MOD = 10
    POWER = 11
    LESS_THAN = 12
    GREATER_THAN = 13
    EQUALS = 14
    GT_EQ = 15
    LT_EQ = 16
    NOT_EQ_1 = 17
    NOT_EQ_2 = 18
    ASSIGN = 19
    DEF = 20
    RETURN = 21
    RAISE = 22
    ASSERT = 23
    IF = 24
    ELIF = 25
    ELSE = 26
    WHILE = 27
    FOR = 28
    IN = 29
    TRY = 30
    FINALLY = 31
    EXCEPT = 32
    OR = 33
    AND = 34
    NOT = 35
    IS = 36
    NONE = 37
    TRUE = 38
    FALSE = 39
    CLASS = 40
    PASS = 41
    CONTINUE = 42
    BREAK = 43
    PI = 44
    X = 45
    H = 46
    Z = 47
    Y = 48
    S = 49
    SDG = 50
    T = 51
    TDG = 52
    RX = 53
    RY = 54
    RZ = 55
    CX = 56
    P = 57
    OPEN_PAREN = 58
    CLOSE_PAREN = 59
    OPEN_BRACK = 60
    CLOSE_BRACK = 61
    OPEN_BRACE = 62
    CLOSE_BRACE = 63
    DOT = 64
    COMMA = 65
    COLON = 66
    SEMI_COLON = 67
    NEWLINE = 68
    MATMUL = 69
    KRONECKER = 70
    HERMITIAN = 71
    CONJUGATE = 72
    TRANSPOSE = 73
    IDENTIFIER = 74
    QUBIT_IDENTIFIER = 75
    QUBIT_TRANSPOSE_IDENTIFIER = 76
    STRING_LITERAL = 77
    INTEGER_LITERAL = 78
    IMAGINARY_LITERAL = 79
    FLOAT_LITERAL = 80
    QUBIT_STATE_LITERAL = 81
    QUBIT_TRANSPOSE_STATE_LITERAL = 82

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'//'", "'%'", "'**'", "'<'", "'>'", 
            "'=='", "'>='", "'<='", "'<>'", "'!='", "'='", "'def'", "'return'", 
            "'raise'", "'assert'", "'if'", "'elif'", "'else'", "'while'", 
            "'for'", "'in'", "'try'", "'finally'", "'except'", "'or'", "'and'", 
            "'not'", "'is'", "'None'", "'True'", "'False'", "'class'", "'pass'", 
            "'continue'", "'break'", "'pi'", "'X'", "'H'", "'Z'", "'Y'", 
            "'S'", "'SDG'", "'Toffoli'", "'TDG'", "'RX'", "'RY'", "'RZ'", 
            "'CX'", "'P'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'.'", 
            "','", "':'", "';'", "'@'", "'(X)'", "'T'", "'''", "'t'" ]

    symbolicNames = [ "<INVALID>",
            "INDENT", "DEDENT", "SPACES", "COMMENTS", "ADD", "MINUS", "STAR", 
            "DIV", "IDIV", "MOD", "POWER", "LESS_THAN", "GREATER_THAN", 
            "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "ASSIGN", 
            "DEF", "RETURN", "RAISE", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
            "FOR", "IN", "TRY", "FINALLY", "EXCEPT", "OR", "AND", "NOT", 
            "IS", "NONE", "TRUE", "FALSE", "CLASS", "PASS", "CONTINUE", 
            "BREAK", "PI", "X", "H", "Z", "Y", "S", "SDG", "T", "TDG", "RX", 
            "RY", "RZ", "CX", "P", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", 
            "CLOSE_BRACK", "OPEN_BRACE", "CLOSE_BRACE", "DOT", "COMMA", 
            "COLON", "SEMI_COLON", "NEWLINE", "MATMUL", "KRONECKER", "HERMITIAN", 
            "CONJUGATE", "TRANSPOSE", "IDENTIFIER", "QUBIT_IDENTIFIER", 
            "QUBIT_TRANSPOSE_IDENTIFIER", "STRING_LITERAL", "INTEGER_LITERAL", 
            "IMAGINARY_LITERAL", "FLOAT_LITERAL", "QUBIT_STATE_LITERAL", 
            "QUBIT_TRANSPOSE_STATE_LITERAL" ]

    ruleNames = [ "SPACES", "COMMENTS", "ADD", "MINUS", "STAR", "DIV", "IDIV", 
                  "MOD", "POWER", "LESS_THAN", "GREATER_THAN", "EQUALS", 
                  "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "ASSIGN", "DEF", 
                  "RETURN", "RAISE", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                  "FOR", "IN", "TRY", "FINALLY", "EXCEPT", "OR", "AND", 
                  "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", "PASS", 
                  "CONTINUE", "BREAK", "PI", "X", "H", "Z", "Y", "S", "SDG", 
                  "T", "TDG", "RX", "RY", "RZ", "CX", "P", "OPEN_PAREN", 
                  "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", "OPEN_BRACE", 
                  "CLOSE_BRACE", "DOT", "COMMA", "COLON", "SEMI_COLON", 
                  "NEWLINE", "MATMUL", "KRONECKER", "HERMITIAN", "CONJUGATE", 
                  "TRANSPOSE", "IDENTIFIER", "QUBIT_IDENTIFIER", "QUBIT_TRANSPOSE_IDENTIFIER", 
                  "STRING_LITERAL", "INTEGER_LITERAL", "IMAGINARY_LITERAL", 
                  "FLOAT_LITERAL", "QUBIT_STATE_LITERAL", "QUBIT_TRANSPOSE_STATE_LITERAL" ]

    grammarFileName = "QuantumLanguageLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    @property
    def tokens(self):
        try:
            return self._tokens
        except AttributeError:
            self._tokens = []
            return self._tokens
    @property
    def indents(self):
        try:
            return self._indents
        except AttributeError:
            self._indents = []
            return self._indents
    @property
    def opened(self):
        try:
            return self._opened
        except AttributeError:
            self._opened = 0
            return self._opened
    @opened.setter
    def opened(self, value):
        self._opened = value
    @property
    def lastToken(self):
        try:
            return self._lastToken
        except AttributeError:
            self._lastToken = None
            return self._lastToken
    @lastToken.setter
    def lastToken(self, value):
        self._lastToken = value
    def reset(self):
        super().reset()
        self.tokens = []
        self.indents = []
        self.opened = 0
        self.lastToken = None
    def emitToken(self, t):
        super().emitToken(t)
        self.tokens.append(t)
    def nextToken(self):
        if self._input.LA(1) == Token.EOF and self.indents:
            for i in range(len(self.tokens)-1,-1,-1):
                if self.tokens[i].type == Token.EOF:
                    self.tokens.pop(i)
            self.emitToken(self.commonToken(LanguageParser.NEWLINE, '\n'))
            while self.indents:
                self.emitToken(self.createDedent())
                self.indents.pop()
            self.emitToken(self.commonToken(LanguageParser.EOF, "<EOF>"))
        next = super().nextToken()
        if next.channel == Token.DEFAULT_CHANNEL:
            self.lastToken = next
        return next if not self.tokens else self.tokens.pop(0)
    def createDedent(self):
        dedent = self.commonToken(LanguageParser.DEDENT, "")
        dedent.line = self.lastToken.line
        return dedent
    def commonToken(self, type, text, indent=0):
        stop = self.getCharIndex()-1-indent
        start = (stop - len(text) + 1) if text else stop
        return CommonToken(self._tokenFactorySourcePair, type, super().DEFAULT_TOKEN_CHANNEL, start, stop)
    @staticmethod
    def getIndentationCount(spaces):
        count = 0
        for ch in spaces:
            if ch == '\t':
                count += 8 - (count % 8)
            else:
                count += 1
        return count
    def atStartOfInput(self):
        return Lexer.column.fget(self) == 0 and Lexer.line.fget(self) == 1


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[65] = self.NEWLINE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

            tempt = Lexer.text.fget(self)
            newLine = re.sub("[^\r\n\f]+", "", tempt)
            spaces = re.sub("[\r\n\f]+", "", tempt)
            la_char = ""
            try:
                la = self._input.LA(1)
                la_char = chr(la)       # Python does not compare char to ints directly
            except ValueError:          # End of file
                pass
            # Strip newlines inside open clauses except if we are near EOF. We keep NEWLINEs near EOF to
            # satisfy the final newline needed by the single_put rule used by the REPL.
            try:
                nextnext_la = self._input.LA(2)
                nextnext_la_char = chr(nextnext_la)
            except ValueError:
                nextnext_eof = True
            else:
                nextnext_eof = False
            if self.opened > 0 or nextnext_eof is False and (la_char == '\r' or la_char == '\n' or la_char == '\f' or la_char == '#'):
                self.skip()
            else:
                indent = self.getIndentationCount(spaces)
                previous = self.indents[-1] if self.indents else 0
                self.emitToken(self.commonToken(self.NEWLINE, newLine, indent=indent))      # NEWLINE is actually the '\n' char
                if indent == previous:
                    self.skip()
                elif indent > previous:
                    self.indents.append(indent)
                    self.emitToken(self.commonToken(LanguageParser.INDENT, spaces))
                else:
                    while self.indents and self.indents[-1] > indent:
                        self.emitToken(self.createDedent())
                        self.indents.pop()
                
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[65] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.atStartOfInput()
         


