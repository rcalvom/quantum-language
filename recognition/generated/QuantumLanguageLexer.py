# Generated from QuantumLanguageLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from recognition.base.QuantumLanguageLexerBase import QuantumLanguageLexerBase


def serializedATN():
    return [
        4,0,64,383,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,5,0,128,8,0,10,0,12,0,131,
        9,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,139,8,1,1,2,1,2,5,2,143,8,2,10,2,
        12,2,146,9,2,1,2,3,2,149,8,2,1,3,1,3,3,3,153,8,3,1,3,1,3,1,4,1,4,
        1,4,4,4,160,8,4,11,4,12,4,161,1,5,1,5,4,5,166,8,5,11,5,12,5,167,
        1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,
        1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,
        1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,
        1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,
        1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,
        1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,
        1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,
        1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,
        1,60,1,61,4,61,369,8,61,11,61,12,61,370,1,61,1,61,5,61,375,8,61,
        10,61,12,61,378,9,61,3,61,380,8,61,1,61,1,61,0,0,62,1,3,3,4,5,5,
        7,6,9,7,11,8,13,9,15,10,17,11,19,12,21,13,23,14,25,15,27,16,29,17,
        31,18,33,19,35,20,37,21,39,22,41,23,43,24,45,25,47,26,49,27,51,28,
        53,29,55,30,57,31,59,32,61,33,63,34,65,35,67,36,69,37,71,38,73,39,
        75,40,77,41,79,42,81,43,83,44,85,45,87,46,89,47,91,48,93,49,95,50,
        97,51,99,52,101,53,103,54,105,55,107,56,109,57,111,58,113,59,115,
        60,117,61,119,62,121,63,123,64,1,0,9,2,0,65,90,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,49,57,1,0,48,57,1,0,48,48,2,0,73,73,105,105,
        3,0,43,43,45,45,48,49,3,0,9,10,13,13,32,32,2,0,10,10,13,13,392,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
        0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
        0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,
        0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,1,125,1,0,0,0,3,138,1,0,0,0,5,
        148,1,0,0,0,7,152,1,0,0,0,9,156,1,0,0,0,11,163,1,0,0,0,13,171,1,
        0,0,0,15,173,1,0,0,0,17,175,1,0,0,0,19,177,1,0,0,0,21,179,1,0,0,
        0,23,182,1,0,0,0,25,184,1,0,0,0,27,187,1,0,0,0,29,189,1,0,0,0,31,
        191,1,0,0,0,33,193,1,0,0,0,35,196,1,0,0,0,37,199,1,0,0,0,39,201,
        1,0,0,0,41,203,1,0,0,0,43,206,1,0,0,0,45,209,1,0,0,0,47,212,1,0,
        0,0,49,215,1,0,0,0,51,218,1,0,0,0,53,220,1,0,0,0,55,224,1,0,0,0,
        57,231,1,0,0,0,59,237,1,0,0,0,61,244,1,0,0,0,63,247,1,0,0,0,65,252,
        1,0,0,0,67,257,1,0,0,0,69,263,1,0,0,0,71,267,1,0,0,0,73,270,1,0,
        0,0,75,274,1,0,0,0,77,282,1,0,0,0,79,289,1,0,0,0,81,292,1,0,0,0,
        83,296,1,0,0,0,85,300,1,0,0,0,87,303,1,0,0,0,89,308,1,0,0,0,91,313,
        1,0,0,0,93,319,1,0,0,0,95,325,1,0,0,0,97,330,1,0,0,0,99,339,1,0,
        0,0,101,345,1,0,0,0,103,347,1,0,0,0,105,349,1,0,0,0,107,351,1,0,
        0,0,109,353,1,0,0,0,111,355,1,0,0,0,113,357,1,0,0,0,115,359,1,0,
        0,0,117,361,1,0,0,0,119,363,1,0,0,0,121,365,1,0,0,0,123,379,1,0,
        0,0,125,129,7,0,0,0,126,128,7,1,0,0,127,126,1,0,0,0,128,131,1,0,
        0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,2,1,0,0,0,131,129,1,0,0,
        0,132,133,5,39,0,0,133,134,9,0,0,0,134,139,5,39,0,0,135,136,5,34,
        0,0,136,137,9,0,0,0,137,139,5,34,0,0,138,132,1,0,0,0,138,135,1,0,
        0,0,139,4,1,0,0,0,140,144,7,2,0,0,141,143,7,3,0,0,142,141,1,0,0,
        0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,149,1,0,0,
        0,146,144,1,0,0,0,147,149,7,4,0,0,148,140,1,0,0,0,148,147,1,0,0,
        0,149,6,1,0,0,0,150,153,3,9,4,0,151,153,3,5,2,0,152,150,1,0,0,0,
        152,151,1,0,0,0,153,154,1,0,0,0,154,155,7,5,0,0,155,8,1,0,0,0,156,
        157,3,5,2,0,157,159,5,46,0,0,158,160,7,3,0,0,159,158,1,0,0,0,160,
        161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,10,1,0,0,0,163,165,
        5,124,0,0,164,166,7,6,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,
        1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,5,62,0,0,170,12,
        1,0,0,0,171,172,5,43,0,0,172,14,1,0,0,0,173,174,5,45,0,0,174,16,
        1,0,0,0,175,176,5,42,0,0,176,18,1,0,0,0,177,178,5,47,0,0,178,20,
        1,0,0,0,179,180,5,47,0,0,180,181,5,47,0,0,181,22,1,0,0,0,182,183,
        5,37,0,0,183,24,1,0,0,0,184,185,5,42,0,0,185,186,5,42,0,0,186,26,
        1,0,0,0,187,188,5,124,0,0,188,28,1,0,0,0,189,190,5,94,0,0,190,30,
        1,0,0,0,191,192,5,38,0,0,192,32,1,0,0,0,193,194,5,60,0,0,194,195,
        5,60,0,0,195,34,1,0,0,0,196,197,5,62,0,0,197,198,5,62,0,0,198,36,
        1,0,0,0,199,200,5,60,0,0,200,38,1,0,0,0,201,202,5,62,0,0,202,40,
        1,0,0,0,203,204,5,61,0,0,204,205,5,61,0,0,205,42,1,0,0,0,206,207,
        5,62,0,0,207,208,5,61,0,0,208,44,1,0,0,0,209,210,5,60,0,0,210,211,
        5,61,0,0,211,46,1,0,0,0,212,213,5,60,0,0,213,214,5,62,0,0,214,48,
        1,0,0,0,215,216,5,33,0,0,216,217,5,61,0,0,217,50,1,0,0,0,218,219,
        5,61,0,0,219,52,1,0,0,0,220,221,5,100,0,0,221,222,5,101,0,0,222,
        223,5,102,0,0,223,54,1,0,0,0,224,225,5,114,0,0,225,226,5,101,0,0,
        226,227,5,116,0,0,227,228,5,117,0,0,228,229,5,114,0,0,229,230,5,
        110,0,0,230,56,1,0,0,0,231,232,5,114,0,0,232,233,5,97,0,0,233,234,
        5,105,0,0,234,235,5,115,0,0,235,236,5,101,0,0,236,58,1,0,0,0,237,
        238,5,97,0,0,238,239,5,115,0,0,239,240,5,115,0,0,240,241,5,101,0,
        0,241,242,5,114,0,0,242,243,5,116,0,0,243,60,1,0,0,0,244,245,5,105,
        0,0,245,246,5,102,0,0,246,62,1,0,0,0,247,248,5,101,0,0,248,249,5,
        108,0,0,249,250,5,105,0,0,250,251,5,102,0,0,251,64,1,0,0,0,252,253,
        5,101,0,0,253,254,5,108,0,0,254,255,5,115,0,0,255,256,5,101,0,0,
        256,66,1,0,0,0,257,258,5,119,0,0,258,259,5,104,0,0,259,260,5,105,
        0,0,260,261,5,108,0,0,261,262,5,101,0,0,262,68,1,0,0,0,263,264,5,
        102,0,0,264,265,5,111,0,0,265,266,5,114,0,0,266,70,1,0,0,0,267,268,
        5,105,0,0,268,269,5,110,0,0,269,72,1,0,0,0,270,271,5,116,0,0,271,
        272,5,114,0,0,272,273,5,121,0,0,273,74,1,0,0,0,274,275,5,102,0,0,
        275,276,5,105,0,0,276,277,5,110,0,0,277,278,5,97,0,0,278,279,5,108,
        0,0,279,280,5,108,0,0,280,281,5,121,0,0,281,76,1,0,0,0,282,283,5,
        101,0,0,283,284,5,120,0,0,284,285,5,99,0,0,285,286,5,101,0,0,286,
        287,5,112,0,0,287,288,5,116,0,0,288,78,1,0,0,0,289,290,5,111,0,0,
        290,291,5,114,0,0,291,80,1,0,0,0,292,293,5,97,0,0,293,294,5,110,
        0,0,294,295,5,100,0,0,295,82,1,0,0,0,296,297,5,110,0,0,297,298,5,
        111,0,0,298,299,5,116,0,0,299,84,1,0,0,0,300,301,5,105,0,0,301,302,
        5,115,0,0,302,86,1,0,0,0,303,304,5,78,0,0,304,305,5,111,0,0,305,
        306,5,110,0,0,306,307,5,101,0,0,307,88,1,0,0,0,308,309,5,84,0,0,
        309,310,5,114,0,0,310,311,5,117,0,0,311,312,5,101,0,0,312,90,1,0,
        0,0,313,314,5,70,0,0,314,315,5,97,0,0,315,316,5,108,0,0,316,317,
        5,115,0,0,317,318,5,101,0,0,318,92,1,0,0,0,319,320,5,99,0,0,320,
        321,5,108,0,0,321,322,5,97,0,0,322,323,5,115,0,0,323,324,5,115,0,
        0,324,94,1,0,0,0,325,326,5,112,0,0,326,327,5,97,0,0,327,328,5,115,
        0,0,328,329,5,115,0,0,329,96,1,0,0,0,330,331,5,99,0,0,331,332,5,
        111,0,0,332,333,5,110,0,0,333,334,5,116,0,0,334,335,5,105,0,0,335,
        336,5,110,0,0,336,337,5,117,0,0,337,338,5,101,0,0,338,98,1,0,0,0,
        339,340,5,98,0,0,340,341,5,114,0,0,341,342,5,101,0,0,342,343,5,97,
        0,0,343,344,5,107,0,0,344,100,1,0,0,0,345,346,5,40,0,0,346,102,1,
        0,0,0,347,348,5,41,0,0,348,104,1,0,0,0,349,350,5,91,0,0,350,106,
        1,0,0,0,351,352,5,93,0,0,352,108,1,0,0,0,353,354,5,123,0,0,354,110,
        1,0,0,0,355,356,5,125,0,0,356,112,1,0,0,0,357,358,5,46,0,0,358,114,
        1,0,0,0,359,360,5,44,0,0,360,116,1,0,0,0,361,362,5,58,0,0,362,118,
        1,0,0,0,363,364,5,59,0,0,364,120,1,0,0,0,365,366,5,10,0,0,366,122,
        1,0,0,0,367,369,7,7,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,368,
        1,0,0,0,370,371,1,0,0,0,371,380,1,0,0,0,372,376,5,35,0,0,373,375,
        8,8,0,0,374,373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,
        1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,379,368,1,0,0,0,379,372,
        1,0,0,0,380,381,1,0,0,0,381,382,6,61,0,0,382,124,1,0,0,0,11,0,129,
        138,144,148,152,161,167,370,376,379,1,6,0,0
    ]

class QuantumLanguageLexer(QuantumLanguageLexerBase):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INDENT = 1
    DEDENT = 2
    IDENTIFIER = 3
    STRING_LITERAL = 4
    INTEGER_LITERAL = 5
    IMAGINARY_LITERAL = 6
    FLOAT_LITERAL = 7
    QUBIT_STATE_LITERAL = 8
    ADD = 9
    MINUS = 10
    STAR = 11
    DIV = 12
    IDIV = 13
    MOD = 14
    POWER = 15
    OR_OP = 16
    XOR = 17
    AND_OP = 18
    LEFT_SHIFT = 19
    RIGHT_SHIFT = 20
    LESS_THAN = 21
    GREATER_THAN = 22
    EQUALS = 23
    GT_EQ = 24
    LT_EQ = 25
    NOT_EQ_1 = 26
    NOT_EQ_2 = 27
    ASSIGN = 28
    DEF = 29
    RETURN = 30
    RAISE = 31
    ASSERT = 32
    IF = 33
    ELIF = 34
    ELSE = 35
    WHILE = 36
    FOR = 37
    IN = 38
    TRY = 39
    FINALLY = 40
    EXCEPT = 41
    OR = 42
    AND = 43
    NOT = 44
    IS = 45
    NONE = 46
    TRUE = 47
    FALSE = 48
    CLASS = 49
    PASS = 50
    CONTINUE = 51
    BREAK = 52
    OPEN_PAREN = 53
    CLOSE_PAREN = 54
    OPEN_BRACK = 55
    CLOSE_BRACK = 56
    OPEN_BRACE = 57
    CLOSE_BRACE = 58
    DOT = 59
    COMMA = 60
    COLON = 61
    SEMI_COLON = 62
    NEWLINE = 63
    SKIP_ = 64

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'//'", "'%'", "'**'", "'|'", "'^'", 
            "'&'", "'<<'", "'>>'", "'<'", "'>'", "'=='", "'>='", "'<='", 
            "'<>'", "'!='", "'='", "'def'", "'return'", "'raise'", "'assert'", 
            "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
            "'finally'", "'except'", "'or'", "'and'", "'not'", "'is'", "'None'", 
            "'True'", "'False'", "'class'", "'pass'", "'continue'", "'break'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "'.'", "','", "':'", 
            "';'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "INDENT", "DEDENT", "IDENTIFIER", "STRING_LITERAL", "INTEGER_LITERAL", 
            "IMAGINARY_LITERAL", "FLOAT_LITERAL", "QUBIT_STATE_LITERAL", 
            "ADD", "MINUS", "STAR", "DIV", "IDIV", "MOD", "POWER", "OR_OP", 
            "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "LESS_THAN", "GREATER_THAN", 
            "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "ASSIGN", 
            "DEF", "RETURN", "RAISE", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
            "FOR", "IN", "TRY", "FINALLY", "EXCEPT", "OR", "AND", "NOT", 
            "IS", "NONE", "TRUE", "FALSE", "CLASS", "PASS", "CONTINUE", 
            "BREAK", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
            "OPEN_BRACE", "CLOSE_BRACE", "DOT", "COMMA", "COLON", "SEMI_COLON", 
            "NEWLINE", "SKIP_" ]

    ruleNames = [ "IDENTIFIER", "STRING_LITERAL", "INTEGER_LITERAL", "IMAGINARY_LITERAL", 
                  "FLOAT_LITERAL", "QUBIT_STATE_LITERAL", "ADD", "MINUS", 
                  "STAR", "DIV", "IDIV", "MOD", "POWER", "OR_OP", "XOR", 
                  "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "LESS_THAN", "GREATER_THAN", 
                  "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "ASSIGN", 
                  "DEF", "RETURN", "RAISE", "ASSERT", "IF", "ELIF", "ELSE", 
                  "WHILE", "FOR", "IN", "TRY", "FINALLY", "EXCEPT", "OR", 
                  "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", 
                  "PASS", "CONTINUE", "BREAK", "OPEN_PAREN", "CLOSE_PAREN", 
                  "OPEN_BRACK", "CLOSE_BRACK", "OPEN_BRACE", "CLOSE_BRACE", 
                  "DOT", "COMMA", "COLON", "SEMI_COLON", "NEWLINE", "SKIP_" ]

    grammarFileName = "QuantumLanguageLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


